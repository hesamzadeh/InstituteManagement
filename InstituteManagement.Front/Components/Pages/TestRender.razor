@page "/testrender"
@inject IJSRuntime JS

<h3>Test Render Page</h3>
<p>JS Ready: @_jsReady</p>
<p>Render count: @_renderCount</p>

<button class="btn btn-primary" @onclick="TestJs" disabled="@( !_jsReady )">
    Call JS (console.log)
</button>

@code {
    private bool _jsReady = false;
    private int _renderCount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _renderCount++;
        Console.WriteLine($"TestRender: OnAfterRenderAsync, firstRender={firstRender}");

        if (!_jsReady)
        {
            try
            {
                await JS.InvokeVoidAsync("console.debug", "✅ JS is available now!");
                _jsReady = true;
                StateHasChanged();
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine("JS not available yet (prerender phase): " + ex.Message);
            }
        }
    }

    private async Task TestJs()
    {
        await JS.InvokeVoidAsync("console.log", "👉 Blazor JS Interop works!");
    }
}
