@page "/signup"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@using InstituteManagement.Shared.DTOs.Signup

<h3>Signup</h3>
<EditForm EditContext="@editContext" OnValidSubmit="HandleSignup" FormName="SignupForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="signup.FirstName" placeholder="First Name" class="form-control" />
    <ValidationMessage For="@(() => signup.FirstName)" />

    <InputText @bind-Value="signup.LastName" placeholder="Last Name" class="form-control" />
    <ValidationMessage For="@(() => signup.LastName)" />

    <InputText @bind-Value="signup.NationalId" placeholder="National ID" class="form-control" />
    <ValidationMessage For="@(() => signup.NationalId)" />

    <InputDate @bind-Value="signup.Birthday" class="form-control" />
    <ValidationMessage For="@(() => signup.Birthday)" />

    <InputText @bind-Value="signup.UserName" placeholder="Username" class="form-control" />
    <ValidationMessage For="@(() => signup.UserName)" />

    <InputText @bind-Value="signup.Email" placeholder="Email" class="form-control" />
    <ValidationMessage For="@(() => signup.Email)" />

    <button type="submit" class="btn btn-primary">Sign Up</button>
</EditForm>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="mt-3 alert alert-info">@responseMessage</div>
}
@* @code {
    private SignupDto signup = new();
    private bool _jsReady = false;
    private string responseMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsReady = true;
            StateHasChanged();
        }
    }

    private async Task HandleSignup()
    {
        if (!_jsReady)
        {
            Console.WriteLine("JS runtime is not yet ready.");
            //return;
        }

        try
        {
            var token = await JS.InvokeAsync<string>("getRecaptchaToken");
            signup.RecaptchaToken = token;

            // Call your backend API
            var response = await Http.PostAsJsonAsync("api/signup", signup);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<object>();
                responseMessage = "Signup successful!";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                responseMessage = $"Signup failed: {error}";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
        }
    }
} *@
@code {
    private SignupDto signup = new();
    private bool _jsReady = false;
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private string responseMessage;

    protected override void OnInitialized()
    {
        editContext = new EditContext(signup);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task HandleSignup()
    {
        if (!_jsReady) return;

        try
        {
            var token = await JS.InvokeAsync<string>("getRecaptchaToken");
            signup.RecaptchaToken = token;

            // Clear previous messages
            messageStore.Clear();
            editContext.NotifyValidationStateChanged();

            var response = await Http.PostAsJsonAsync("api/signup", signup);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Signup successful!";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorData = await response.Content.ReadFromJsonAsync<ValidationProblemDetails>();
                if (errorData?.Errors != null)
                {
                    foreach (var kv in errorData.Errors)
                    {
                        messageStore.Add(editContext.Field(kv.Key), kv.Value);
                    }

                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    responseMessage = "Signup failed with unknown error.";
                }
            }
            else
            {
                responseMessage = "Signup failed due to server error.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
            responseMessage = "An unexpected error occurred.";
        }
    }
}
