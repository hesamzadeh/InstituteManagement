@page "/signup"
@inject HttpClient Http
@inject IJSRuntime JS
@using InstituteManagement.Shared.DTOs.Signup
<component type="typeof(App)" render-mode="Server" />

<h3>Signup</h3>

<EditForm Model="@signup" OnValidSubmit="HandleSignup" FormName="SignupForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="signup.FirstName" placeholder="First Name" class="form-control" />
    <InputText @bind-Value="signup.LastName" placeholder="Last Name" class="form-control" />
    <InputText @bind-Value="signup.NationalId" placeholder="National ID" class="form-control" />
    <InputDate @bind-Value="signup.Birthday" class="form-control" />
    <InputText @bind-Value="signup.UserName" placeholder="Username" class="form-control" />
    <InputText @bind-Value="signup.Email" placeholder="Email" class="form-control" />

    <button type="submit" class="btn btn-primary">Sign Up</button>
</EditForm>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="mt-3 alert alert-info">@responseMessage</div>
}
@code {
    private SignupDto signup = new();
    private bool _jsReady = false;
    private string responseMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Signup component rendered.");
        await Task.CompletedTask;
        if (firstRender)
        {
            _jsReady = true;
        }
    }

    private async Task HandleSignup()
    {
        if (!_jsReady)
        {
            Console.WriteLine("JS runtime is not yet ready.");
            //return;
        }

        try
        {
            var token = await JS.InvokeAsync<string>("getRecaptchaToken");
            signup.RecaptchaToken = token;

            // Call your backend API
            var response = await Http.PostAsJsonAsync("api/signup", signup);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<object>();
                responseMessage = "Signup successful!";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                responseMessage = $"Signup failed: {error}";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
        }
    }
}


@* @code {
    private SignupDto signup = new();
    private string responseMessage;
    private bool _jsReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsReady = true;
        }
    }

    private async Task HandleSignup()
    {
        if (!_jsReady)
        {
            Console.WriteLine("JS runtime is not yet ready.");
            //return;
        }
        // Execute reCAPTCHA
        signup.RecaptchaToken = await JS.InvokeAsync<string>("executeRecaptcha");

        var response = await Http.PostAsJsonAsync("api/signup", signup);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<object>();
            responseMessage = "Signup successful!";
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            responseMessage = $"Signup failed: {error}";
        }
    }

    [Inject] private IJSRuntime JS { get; set; }
} *@
