@page "/people"
@using InstituteManagement.Blazor.Services
@using InstituteManagement.Shared.DTOs.Persons
@inject PersonApiService PersonService

<h3>People</h3>

@if (people == null)
{
    <p><em>Loading...</em></p>
}
else if (people.Count == 0)
{
    <p>No people found.</p>
}
else
{
    <ul>
        @foreach (var person in people)
        {
            <li>@person.FirstName @person.LastName</li>
        }
    </ul>
}

<h4>Create Person</h4>
<EditForm Model="newPerson" OnValidSubmit="HandleValidSubmit" FormName="CreatePersonForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="newPerson.FirstName" />
    </div>

    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="newPerson.LastName" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private List<PersonDto>? people;
    private CreatePersonDto newPerson = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPeopleAsync();
    }

    private async Task LoadPeopleAsync()
    {
        try
        {
            people = await PersonService.GetPeopleAsync();
        }
        catch
        {
            people = new(); // fallback
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Submitting: {newPerson.FirstName} {newPerson.LastName}");

        var created = await PersonService.CreatePersonAsync(newPerson);
        if (created != null)
        {
            people?.Add(created);
            newPerson = new(); // reset form
        }
    }
}
